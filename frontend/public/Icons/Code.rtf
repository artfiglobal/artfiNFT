{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28300\viewh17700\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import React from 'react'\
\
const TileSize = 32\
\
const ImageTiler = (\{ imageUrl \}) => \{\
  const canvasRef = React.useRef(null)\
\
  React.useEffect(() => \{\
    const image = new Image()\
    image.src = imageUrl\
    image.onload = () => \{\
      const \{ width, height \} = image\
\
      // Get the canvas element and its context\
      const canvas = canvasRef.current\
      const ctx = canvas.getContext('2d')\
\
      // Draw the image on the canvas\
      ctx.drawImage(image, 0, 0)\
\
      // Get the image data from the canvas\
      const imageData = ctx.getImageData(0, 0, width, height)\
\
      // Loop through the image data and draw each tile on the canvas\
      for (let y = 0; y < height; y += TileSize) \{\
        for (let x = 0; x < width; x += TileSize) \{\
          // Create a new image data object for the tile\
          const tileImageData = ctx.createImageData(TileSize, TileSize)\
\
          // Copy the data for the tile from the original image data\
          for (let i = 0; i < TileSize; i++) \{\
            for (let j = 0; j < TileSize; j++) \{\
              const pixelIndex = (y + i) * width * 4 + (x + j) * 4\
              tileImageData.data[i * TileSize * 4 + j * 4] = imageData.data[pixelIndex]\
              tileImageData.data[i * TileSize * 4 + j * 4 + 1] = imageData.data[pixelIndex + 1]\
              tileImageData.data[i * TileSize * 4 + j * 4 + 2] = imageData.data[pixelIndex + 2]\
              tileImageData.data[i * TileSize * 4 + j * 4 + 3] = imageData.data[pixelIndex + 3]\
            \}\
          \}\
\
          // Draw the tile on the canvas\
          ctx.putImageData(tileImageData, x, y)\
        \}\
      \}\
    \}\
  \}, [imageUrl])\
\
  return <canvas ref=\{canvasRef\} />\
\}\
\
export default ImageTiler\
}